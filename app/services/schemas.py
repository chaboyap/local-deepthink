# app/services/schemas.py

from pydantic import BaseModel, Field
from typing import List

class AgentOutput(BaseModel):
    """Defines the structured output for a standard agent turn."""
    proposed_solution: str = Field(description="The detailed, comprehensive solution to the assigned sub-problem.")
    reasoning: str = Field(description="A step-by-step explanation of how the solution was derived, including any assumptions made.")
    skills_used: List[str] = Field(description="A list of the specific skills from your profile that were used to generate this solution.")

class SynthesisOutput(AgentOutput):
    """The output of the synthesis node, which has the same structure as a standard agent output."""
    pass

class CodeSynthesisOutput(BaseModel):
    """Defines the structured output for the code synthesis node."""
    proposed_solution: str = Field(description="The final, complete, and runnable code block, enclosed in markdown. This should be the only content.")
    reasoning: str = Field(description="A brief explanation of how the different agent solutions were merged to create the final code.")

class GeneratedQuestions(BaseModel):
    """Defines the structure for the list of questions generated by the interrogator agent."""
    questions: List[str] = Field(description="A list of expert-level questions generated for the final knowledge harvest.")

class AssessmentOutput(BaseModel):
    """Defines the structure for the progress assessor's output."""
    significant_progress: bool = Field(description="A boolean value indicating if significant progress was made.")
    reasoning: str = Field(description="A concise explanation for the assessment decision.")

class NewProblemOutput(BaseModel):
    """Defines the structure for the problem reframer's output."""
    new_problem: str = Field(description="The new, reframed problem for the next epoch of execution.")

class DecompositionOutput(BaseModel):
    """Defines the structure for the problem decomposer's output."""
    sub_problems: List[str] = Field(description="A list of smaller, manageable sub-problems derived from the main problem.")

class AgentAnalysisOutput(BaseModel):
    """Defines the structure for the agent analyzer's output."""
    attributes: str = Field(description="A string of space-separated words (verbs and nouns) describing the agent's capabilities and personality.")
    hard_request: str = Field(description="A request that the agent would struggle to answer, used for evolutionary pressure.")